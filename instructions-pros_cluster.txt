chmod +x cloudlab-setup-ubuntu-tl.sh && ./cloudlab-setup-ubuntu-tl.sh && \
sudo apt-get install libvirt-daemon genisoimage libguestfs-tools libosinfo-bin virtinst qemu-kvm git vim net-tools wget curl bash-completion python-pip libvirt-daemon-system virt-manager bridge-utils libnss-libvirt libvirt-clients osinfo-db-tools intltool sshpass p7zip-full p7zip-rar uvtool -y && \
sudo sed -i 's/hosts:          files dns/hosts:          files libvirt libvirt_guest dns/' /etc/nsswitch.conf && sudo lsmod | grep kvm && sudo reboot
#sudo systemctl restart libvirtd && sudo systemctl status libvirtd

screen
# Press Return to continue
# detach from session without killing it: Ctrl a d 
# to see screen sessions: screen -ls
# detach from closed session: screen -d -r 1981.pts-0.node0
# enter session: screen -r 1981.pts-0.node0
# exit a session and terminate it: exit

sudo apt update -y && sudo apt install cockpit -y && sudo systemctl enable --now cockpit.socket && sudo apt install cockpit-machines -y && echo "root:gprm8350" | sudo chpasswd && \
cd /mnt/extra/virt/images/ && http://mirrors.edge.kernel.org/ubuntu-releases/22.04.4/ubuntu-22.04.4-live-server-amd64.iso
exit

sudo -i

# Create OS node VMs
cd /mnt/extra && cat /sys/module/kvm_intel/parameters/nested && cat /proc/cpuinfo | awk '/^processor/{print $3}' | wc -l && free -h && df -hT && sudo virsh list --all && sudo brctl show && \
mkdir -p /mnt/extra/virt/images && mkdir -p /mnt/extra/virt/vms && \
wget -O "/mnt/extra/osinfo-db.tar.xz" https://releases.pagure.org/libosinfo/osinfo-db-20231215.tar.xz && sudo osinfo-db-import --local "/mnt/extra/osinfo-db.tar.xz" && \
sudo sed -i -E 's,#?(security_driver)\s*=.*,\1 = "none",g' /etc/libvirt/qemu.conf && sudo systemctl restart libvirtd && uvt-simplestreams-libvirt sync release=jammy arch=amd64 && ssh-keygen

#sudo ls -lah /var/lib/uvtool/libvirt/images/ && uvt-kvm list

##################################################################################################################################################################################
########## Production Ready OpenStack (PROS) Cluster (https://achchusnulchikam.medium.com/deploy-production-ready-openstack-using-kolla-ansible-9cd1d1f210f1r) ##########################
##################################################################################################################################################################################

cat <<EOF | virsh net-define /dev/stdin
<network>
  <name>virbr-mgt</name>
  <bridge name='virbr-mgt' stp='off'/>
  <forward mode='nat'/>
  <ip address='10.0.123.1' netmask='255.255.255.0'>
  </ip>
</network>
EOF

cat <<EOF | virsh net-define /dev/stdin
<network>
  <name>virbr-sto</name>
  <bridge name='virbr-sto' stp='off'/>
  <forward mode='nat'/>
  <ip address='10.0.124.1' netmask='255.255.255.0'>
  </ip>
</network>
EOF

cat <<EOF | virsh net-define /dev/stdin
<network>
  <name>virbr-ser</name>
  <bridge name='virbr-ser' stp='off'/>
  <forward mode='nat'/>
  <ip address='10.0.125.1' netmask='255.255.255.0'>
  </ip>
</network>
EOF

virsh net-autostart virbr-mgt && virsh net-start virbr-mgt && virsh net-autostart virbr-sto && virsh net-start virbr-sto && virsh net-autostart virbr-ser && virsh net-start virbr-ser && \
git clone https://github.com/vpasias/clusterlab.git && ls -lah && cd /mnt/extra/clusterlab && chmod +x uvt_vm_deployment.sh && ./uvt_vm_deployment.sh

for i in {1..7}; do ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -l ubuntu 10.0.123.1$i 'uname -a'; done

ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -l ubuntu 10.0.123.11

cat /sys/module/kvm_intel/parameters/nested && cat /proc/cpuinfo | awk '/^processor/{print $3}' | wc -l && free -h && df -hT && lsblk && ip a && sudo docker ps
# cat /etc/hosts

sudo -i

ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa

for node in node-{1..7}
do
  sshpass -p gprm8350 ssh-copy-id -o StrictHostKeyChecking=no root@$node
done

# Ceph Deployment

wget -q -O- 'https://download.ceph.com/keys/release.asc' | gpg --dearmor -o /etc/apt/trusted.gpg.d/cephadm.gpg && \
echo deb https://download.ceph.com/debian-reef/ $(lsb_release -sc) main > /etc/apt/sources.list.d/cephadm.list && \
apt-get update && apt-cache policy cephadm && apt-get install cephadm -y

cephadm bootstrap --mon-ip=10.0.123.11 --cluster-network 10.0.124.0/24 --initial-dashboard-password=gprm8350 --dashboard-password-noupdate --allow-fqdn-hostname | tee cephadm-bootstrap.log

# replace XXXXXXXXXXXXXXXXXXXXXXX with the respective fsid displayed on the screen
/usr/sbin/cephadm shell --fsid 8ef0f7e0-1b82-11ef-acfb-1746d288dc8d -c /etc/ceph/ceph.conf -k /etc/ceph/ceph.client.admin.keyring
cephadm add-repo --release reef && cephadm install ceph-common && ceph versions

exit

for node in node-{1..7}
do
  echo "=== Copying ceph.pub to $node ==="
  ssh-copy-id -f -i /etc/ceph/ceph.pub root@$node
  echo ""
  sleep 2
done

for node in node-{1..7}
do
  ssh root@$node "wget -q -O- 'https://download.ceph.com/keys/release.asc' | gpg --dearmor -o /etc/apt/trusted.gpg.d/cephadm.gpg"
  ssh root@$node "echo deb https://download.ceph.com/debian-reef/ $(lsb_release -sc) main > /etc/apt/sources.list.d/cephadm.list"
  ssh root@$node "apt-get update && apt-get install ceph-common -y"
done

for node in node-{1..7}
do
  ceph orch host add $node
done

ceph orch host ls

ceph orch device ls && ceph orch apply osd --all-available-devices --method raw

for node in node-{1..7}
do
  ceph orch host label add $node mon
done

for node in node-{1..7}
do
  ceph orch host label add $node osd
done

ceph orch host ls

for pool_name in volumes images backups vms
do
  ceph osd pool create $pool_name
  rbd pool init $pool_name
done

ceph auth get-or-create client.glance mon 'allow r' osd 'allow class-read object_prefix rbd_children, allow rwx pool=images' -o /etc/ceph/ceph.client.glance.keyring && \
ceph auth get-or-create client.cinder mon 'allow r' osd 'allow class-read object_prefix rbd_children, allow rwx pool=volumes, allow rwx pool=images' -o /etc/ceph/ceph.client.cinder.keyring && \
ceph auth get-or-create client.nova mon 'allow r' osd 'allow class-read object_prefix rbd_children, allow rwx pool=vms, allow rx pool=images' -o /etc/ceph/ceph.client.nova.keyring && \
ceph auth get-or-create client.cinder-backup mon 'allow r' osd 'allow class-read object_prefix rbd_children, allow rwx pool=backups' -o /etc/ceph/ceph.client.cinder-backup.keyring

ceph status && ceph osd tree && ceph df && ceph orch ps && ceph osd pool ls && ls -lh /etc/ceph/

# Openstack Deployment

apt-get update -y && apt-get install python3-dev libffi-dev gcc libssl-dev python3-selinux python3-setuptools python3-venv -y

python3 -m venv kolla-venv
echo "source ~/kolla-venv/bin/activate" >> ~/.bashrc && source ~/kolla-venv/bin/activate

pip install -U pip && pip install 'ansible-core>=2.14,<2.16' && ansible --version && pip install git+https://opendev.org/openstack/kolla-ansible@master

mkdir /etc/ansible && mkdir -p /etc/kolla && chown $USER:$USER /etc/kolla && \
cp -r ~/kolla-venv/share/kolla-ansible/etc_examples/kolla/* /etc/kolla && cp ~/kolla-venv/share/kolla-ansible/ansible/inventory/* .

kolla-ansible install-deps

tee /etc/ansible/ansible.cfg<<EOF
[defaults]
host_key_checking=False
pipelining=True
forks=100
EOF

cd /etc/kolla && cp multinode multinode.bak

git clone https://github.com/vpasias/clusterlab.git && mv /etc/kolla/clusterlab/multinode-uvt /etc/kolla/multinode

ansible -i multinode all -m ping

kolla-genpwd && kolla-ansible -i multinode certificates

mkdir /etc/kolla/config && mkdir /etc/kolla/config/nova && mkdir /etc/kolla/config/glance && \
mkdir -p /etc/kolla/config/cinder/cinder-volume && mkdir /etc/kolla/config/cinder/cinder-backup && \
cp /etc/ceph/ceph.conf /etc/kolla/config/cinder/ && \
cp /etc/ceph/ceph.conf /etc/kolla/config/nova/ && \
cp /etc/ceph/ceph.conf /etc/kolla/config/glance/ && \
cp /etc/ceph/ceph.client.glance.keyring /etc/kolla/config/glance/ && \
cp /etc/ceph/ceph.client.nova.keyring /etc/kolla/config/nova/ && \
cp /etc/ceph/ceph.client.cinder.keyring /etc/kolla/config/nova/ && \
cp /etc/ceph/ceph.client.cinder.keyring /etc/kolla/config/cinder/cinder-volume/ && \
cp /etc/ceph/ceph.client.cinder.keyring /etc/kolla/config/cinder/cinder-backup/ && \
cp /etc/ceph/ceph.client.cinder-backup.keyring /etc/kolla/config/cinder/cinder-backup/

for node in node-{2..7}
do
  scp -r /etc/ceph/ root@$node:/etc/
done

vim globals.yml

### /etc/kolla/globals.yml
---
kolla_base_distro: "ubuntu"
openstack_release: "master"
kolla_internal_vip_address: "10.0.123.5"
kolla_internal_fqdn: "internal.localdomain"
kolla_external_vip_address: "10.0.123.10"
kolla_external_fqdn: "public.localdomain"
kolla_external_vip_interface: "enp1s0"
api_interface: "enp1s0"
tunnel_interface: "enp1s0"
neutron_external_interface: "enp10s0"
neutron_plugin_agent: "ovn"
kolla_enable_tls_internal: "yes"
kolla_enable_tls_external: "yes"
kolla_copy_ca_into_containers: "yes"
openstack_cacert: "/etc/ssl/certs/ca-certificates.crt"
kolla_enable_tls_backend: "yes"
enable_openstack_core: "yes"
enable_cinder: "yes"
enable_fluentd: "no"
enable_neutron_provider_networks: "yes"
ceph_glance_user: "glance"
ceph_glance_keyring: "client.glance.keyring"
ceph_glance_pool_name: "images"
ceph_cinder_user: "cinder"
ceph_cinder_keyring: "client.cinder.keyring"
ceph_cinder_pool_name: "volumes"
ceph_cinder_backup_user: "cinder-backup"
ceph_cinder_backup_keyring: "client.cinder-backup.keyring"
ceph_cinder_backup_pool_name: "backups"
ceph_nova_keyring: "client.nova.keyring"
ceph_nova_user: "nova"
ceph_nova_pool_name: "vms"
glance_backend_ceph: "yes"
cinder_backend_ceph: "yes"
nova_backend_ceph: "yes"
nova_compute_virt_type: "kvm"
neutron_ovn_distributed_fip: "yes"
...
grep -v "#" /etc/kolla/globals.yml | tr -s [:space:]

### Bootstrap servers with kolla deploy dependencies
kolla-ansible -i multinode bootstrap-servers

### Do pre-deployment checks for hosts
kolla-ansible -i multinode prechecks

### Finally proceed to actual OpenStack deployment
kolla-ansible -i multinode deploy

### Do post-deploy after OpenStack was successfuly deployed
kolla-ansible -i multinode post-deploy

cat /etc/kolla/certificates/ca/root.crt | sudo tee -a /etc/ssl/certs/ca-certificates.crt && \
echo "export OS_CACERT=/etc/ssl/certs/ca-certificates.crt" >> /etc/kolla/admin-openrc.sh && \
pip3 install python-openstackclient && openstack --version

source ~/kolla-venv/bin/activate && source /etc/kolla/admin-openrc.sh && \
openstack endpoint list && openstack service list && openstack compute service list && \
openstack network agent list && openstack volume service list && cinder get-pools

# from local terminal:
ssh -L 8001:10.0.123.11:443 vpasias@130.127.134.14
# URL: https://localhost:8001
### URL: https://public.localdomain

kolla-venv/share/kolla-ansible/init-runonce

openstack volume create --image cirros --size 3 boot-cirros

sleep 20

openstack server create --volume boot-cirros --flavor m1.tiny --key-name mykey -network demo-net vm-cirros

ceph df

#############################################################################################################
################ Delete ########################################################################################
#############################################################################################################

for i in {1..7}; do uvt-kvm destroy "node-${i}.localdomain"; done && cd /mnt/extra/ && \
virsh net-destroy virbr-mgt && virsh net-undefine virbr-mgt && virsh net-destroy virbr-sto && virsh net-undefine virbr-sto && virsh net-destroy virbr-ser && virsh net-undefine virbr-ser && \
rm -rf clusterlab && rm -rf /root/.ssh/known_hosts && touch /root/.ssh/known_hosts && sudo virsh list --all && sudo brctl show && sudo virsh net-list --all
